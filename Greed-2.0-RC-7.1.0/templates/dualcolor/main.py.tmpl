${--
#    Vexorian's c++ tester template for greed. Version 0.8
#    - Test cases in ( [ () ], x / None ) format for ease of modification.
#    - Very small code for the problem file.
#    - Requires tester.py. Use dualcolor-tester template.
#    - Template options:
#        * localTestTimeFactor : The problem's time limit will be multiplied by
#                                this value (unless it is set to false)
#                                Computers with much different run speed than
#                                TC might need to tweak.
#        * compactMode : Three options:
#              COMPACT_REPORT : Default, verbose output when running test cases
#                               brief one-line report at the end.
#              FULL_REPORT    : Report needs one line per test case (more detailed)
#              ONLY_REPORT    : Prints only the full report. Very compact.
#        * singleFile : It will render the dualcolor-tester in the same file
#                       instead of using it separately. Use in case the 
#                       requirement for separate file is too complicated to
#                       fulfill.
#        * disableColors: false by default. If true it will not use ANSI color codes.
#        * customTesterLocation :
#             false by default. If it instead had a string location, it will
#             import this customTesterLocation instead of "tester.py
#
#    (c) 2013 Victor Hugo Soliz Kuncar, ZLIB/LibPNG license 
#
}  
#-------------------------------------------------------------------------------
CASE_TIME_OUT = ${Problem.TimeLimitSeconds}${if Options.localTestTimeFactor} * ${Options.localTestTimeFactor}${end};

TEST_CASES = [
${<foreach Examples e}
    ( [${foreach e.Input in ,} ${if !in.Param.Type.Array}${in}${else}(${foreach in.ValueList v}${v},${end})${end}${end} ]${--
--}, ${if e.Output.Param.Type.Array}(${foreach e.Output.ValueList v}${v},${end})${else}${e.Output}${end} ),
${<end}
    #Your custom test goes here:
    #( [${foreach Method.Params p ,} ${end}], None ),
]

def isTestDisabled(i):
    return False

#-------------------------------------------------------------------------------
${<if Options.singleFile}
${<Dependencies.dualcolor-tester.Output}
${<end}
if __name__ == '__main__':
${<if Options.customTesterLocation}
    import imp
    tester = imp.load_source('tester', '${Options.customTesterLocation}' )
${<end}
    import sys${if !Options.singleFile}, tester${end}
${<if Options.disableColors}
    tester.disableColors()
${<end}
    ${if !Options.singleFile}tester.${end}run_tests(
        ${Problem.Name}, '${Method.Name}', TEST_CASES, isTestDisabled, 
        ${CreateTime}, ${Problem.Score}, CASE_TIME_OUT, ${if !Options.singleFile}tester.${end}${Options.compactMode}
    )

